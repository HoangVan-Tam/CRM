@typeparam T

<div class='wrapper @(Active ? "active": "")'>
    <div class='select-btn ' @onclick="@(()=>{Active = !Active;})">
        <span>@Text</span>
        <i class="bi bi-chevron-down"></i>
    </div>
    <div class='content-dropdownlist @(Active ? "d-block": "d-none")'>
        <div class="search">
            <i class="bi bi-search"></i>
            <input spellcheck="false" type="text" placeholder="Search" value="@Search" @oninput="SearchChanged">
        </div>
        <ul class="options">
            @foreach (var item in SearchDataSource)
            {
                <li @onclick="@(e =>  {OnClickedItem(item);} )" class="@(Text.Contains(item.Key) ? "selected" : "")">@item.Key</li>
            }
        </ul>
        <p style='margin-top: 10px; @(SearchDataSource.Keys.Count() == 0 && !string.IsNullOrWhiteSpace(Search) ? "": "display: none")'>Oops! Country not found</p>
    </div>
</div>


@code {
    [Parameter]
    public string Value { get; set; }
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public Dictionary<string, T> DataSource { get; set; }
    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }


    private string Text { get; set; }
    private bool Active { get; set; } = false;
    private string Search { get; set; }
    private Dictionary<string, T> SearchDataSource { get; set; }

    protected override void OnInitialized()
    {
        SearchDataSource = DataSource;
        Text = Label;
    }
    private Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        return ValueChanged.InvokeAsync(Value);
    }
    private void OnClickedItem(KeyValuePair<string, T> pair){
        if (Text.Contains(pair.Key))
        {
            Text = Text.Replace("," + pair.Key, "").Replace(pair.Key, "").TrimStart(',').TrimEnd(',');
            Text = Text.Replace(",,", ",");
            Value = Value.Replace("," + pair.Value, "").Replace(pair.Value.ToString(), "").TrimStart(',').TrimEnd(',');
            Value = Value.Replace(",,", ",");
        }
        else if (Text == Label)
        {
            Text = pair.Key;
            Value = pair.Value.ToString();
        }
        else{
            Text = Text + "," + pair.Key;
            Value = Value + "," + pair.Value;

        }
        if (Text == "")
        {
            Text =  Label;
        }
        StateHasChanged();
    }

    private void SearchChanged(ChangeEventArgs __e)
    {
        Search = __e?.Value?.ToString();
        if(!string.IsNullOrEmpty(Search)){
            SearchDataSource = DataSource.Where(p => p.Key.ToLower().Contains(Search.ToLower())).ToDictionary(key => key.Key, value => value.Value);
        }
        else{
            SearchDataSource = DataSource;
        }
        StateHasChanged();
    }
}
